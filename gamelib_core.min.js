function Gl_preloader() {
    for (var a, b = 0; b < arguments.length; b++)
        a = Gl_totalpreimages++,
        Gl_preimage[a] = new Image,
        Gl_preimage[a].src = arguments[b]
}
function Gl_hook(a) {
    Gl_hooked[Gl_hooked.length] = a
}
function Gl_unhook(a) {
    for (var b = !1, c = 0; c < Gl_hooked.length; c++)
        if (Gl_hooked[c] == a) {
            b = !0;
            break
        }
    if (b) {
        for (a = c; a < Gl_hooked.length - 1; a++)
            Gl_hooked[a] = Gl_hooked[a + 1];
        Gl_hooked.length--
    }
}
function Gl_start() {
    console.log("GL_start");
    Gl_browser.panic ? Gl_alert("Gl_start()", "Error! Gamelib could not start!") : Gl_running || (Gl_running = !0,
    Gl_interval = Gl_browser.ns4 ? setTimeout("Gl_loop()", Gl_timerSpeed) : setInterval("Gl_loop()", Gl_timerSpeed))
}
function Gl_stop() {
    Gl_running = !1;
    clearInterval(Gl_interval)
}
function Gl_setTimerSpeed(a) {
    Gl_stop();
    Gl_timerSpeed = a;
    Gl_start()
}
function Gl_makedegs() {
    for (n = 0; 360 > n; n++)
        Gl_sin[n] = Math.sin(3.14159 * n / 180),
        Gl_cos[n] = -Math.cos(3.14159 * n / 180)
}
function Gl_get_cookies() {
    for (var a = document.cookie.split("; "), b = 0; b < a.length; b++)
        Gl_cookies[b] = new Gl_Cookie_construct(a[b])
}
function Gl_Cookie_construct(a) {
    a = a.split("=");
    this.name = unescape(a[0]);
    this.value = unescape(a[1])
}
function Gl_set_cookie(a) {
    return document.cookie = this.name + "=" + escape(a) + "; expires= Wed, 1 May 2030 23:00:00 UTC; path=/",
    this.value = a,
    !0
}
function Gl_delete_cookie() {
    for (var a = 0; a < Gl_cookies.length; a++)
        if (Gl_cookies[a].name == this.name) {
            this.value = null;
            document.cookie = this.name + "=; expires= Mon, 3 Jan 2000 00:00:00 UTC; path=/";
            Gl_cookies[a].name = "";
            Gl_cookies[a].value = "";
            break
        }
    return !0
}
function Gl_get_cookie(a) {
    for (var b = 0; b < Gl_cookies.length; b++)
        if (Gl_cookies[b].name == a)
            return Gl_cookies[b].value;
    return null
}
function Gl_cookie(a) {
    this.name = a;
    this.value = Gl_get_cookie(a);
    this.setvalue = Gl_set_cookie;
    this.erase = Gl_delete_cookie
}
function Gl_get_window_height() {
    return windowheight = Gl_browser.ie ? document.body.offsetHeight : window.innerHeight
}
function Gl_get_window_width() {
    return windowwidth = Gl_browser.ie ? document.body.offsetWidth : window.innerWidth
}
function Gl_get_window_scrollX() {
    return Gl_browser.ie ? document.body.scrollLeft : Gl_browser.dom2 ? window.scrollX : window.pageXOffset
}
function Gl_get_window_scrollY() {
    return Gl_browser.ie ? document.body.scrollTop : Gl_browser.dom2 ? window.scrollY : window.pageYOffset
}
function Gl_scrollWindow(a, b) {
    window.scrollTo(a, b)
}
function Gl_scrollbars(a) {
    if (a = a.toLowerCase(),
    "off" == a ? a = "no" : "on" == a && (a = "yes"),
    "yes" == a || "no" == a)
        Gl_browser.ie ? document.body.scroll = a : Gl_browser.dom2 && (document.getElementsByTagName("body")[0].style.overflow = "yes" == a ? "visible" : "hidden")
}
function Gl_layer(a, b, c, d) {
    var f, e;
    return this.on = !0,
    this.mouse = !0,
    this.x = a,
    this.y = b,
    this.z = Gl_layer_index,
    this.xmax = 1E3,
    this.xmin = 0,
    this.ymax = 1E3,
    this.ymin = 0,
    this.URL = "",
    this.lock = [],
    this.lockxoff = [],
    this.lockyoff = [],
    this.innerHTML = d,
    this.draggable = !1,
    this.dragnormal = !0,
    this.dragvert = !1,
    this.draghoriz = !1,
    this.onmouseover = "",
    this.onmouseout = "",
    this.onclickup = "",
    this.onclickdown = "",
    this.opacity = 100,
    this.clipleft = 0,
    this.clipright = 0,
    this.cliptop = 0,
    this.clipbottom = 0,
    this.clipped = !1,
    this.following = null,
    this.followingx = 0,
    this.followingy = 0,
    this.followingox = -1E3,
    this.followingoy = -1E3,
    this.alive = !0,
    this.index = Gl_layer_index,
    Gl_browser.ie ? (Gl_firstlayer && (5 < Gl_browser.version ? (Gl_iebuffer = document.createElement('<iframe name="buffer" id="buffer"></iframe>'),
    document.body.appendChild(Gl_iebuffer),
    Gl_iebuffer.style.left = "-10px",
    Gl_iebuffer.style.top = "-10px",
    Gl_iebuffer.style.visibility = "hidden") : (document.body.insertAdjacentHTML("BeforeEnd", '<iframe name="buffer" id="buffer" src="" style="position:absolute;left:-100;top:-100;width:10;height:10;visibility:hidden"></iframe>'),
    Gl_iebuffer = document.all.buffer),
    Gl_ieframe = document.frames.buffer,
    Gl_firstlayer = !1),
    this.raw = genDiv(a, b, c, "Adiv", Gl_layer_index, d),
    this.ob = this.raw.style,
    this.width = this.raw.clientWidth,
    this.height = this.raw.clientHeight,
    this.write = Gl_layerwriteIE,
    this.append = Gl_layerappendIE,
    this.moveTo = Gl_movetoIE,
    this.clip = Gl_obclipIE,
    this.resizeTo = Gl_layerresizeIE,
    this.setBgcolor = Gl_setbgcolorIE,
    this.setBackground = Gl_setbackgroundIE,
    this.setOpacity = Gl_setOpacityIE) : Gl_browser.dom2 ? (f = document.getElementsByTagName("body").item(0),
    Gl_firstlayer && (e = document.createElement("IFRAME"),
    e.setAttribute("id", "buffer"),
    e.setAttribute("name", "buffer"),
    e.setAttribute("style", "position:absolute;left:0px;top:-20px;width:1px;height:1px;visibility:hidden"),
    e.setAttribute("src", ""),
    e.src = "",
    e.id = "buffer",
    e.name = "buffer",
    e.width = 1,
    e.height = 1,
    e.style.position = "absolute",
    e.style.overflow = "hidden",
    e.style.visibility = "hidden",
    f.appendChild(e),
    e.style.left = "0px",
    e.style.top = "-20px",
    Gl_iebuffer = document.getElementById("buffer"),
    Gl_firstlayer = !1),
    this.raw = genDiv(a, b, c, "Adiv", Gl_layer_index, d, f),
    this.ob = this.raw.style,
    this.width = this.raw.offsetWidth,
    this.height = this.raw.offsetHeight,
    this.write = Gl_layerwriteDOM2,
    this.append = Gl_layerappendIE,
    this.moveTo = Gl_movetoDOM2,
    this.setBgcolor = Gl_setbgcolorIE,
    this.clip = Gl_obclipDOM2,
    this.setOpacity = Gl_setOpacityDOM2,
    this.setBackground = Gl_setbackgroundIE,
    this.resizeTo = Gl_layerresizeDOM2) : Gl_browser.ns4 && (this.raw = genDiv(a, b, c, "Adiv", Gl_layer_index, d),
    this.ob = this.raw,
    this.width = this.ob.clip.width,
    this.height = this.ob.clip.height,
    this.write = Gl_layerwriteNS,
    this.append = Gl_layerappendNS,
    this.moveTo = Gl_movetoNS,
    this.clip = Gl_obclipNS,
    this.resizeTo = Gl_layerresizeNS,
    this.setBgcolor = Gl_setbgcolorNS,
    this.setBackground = Gl_setbackgroundNS,
    this.setOpacity = Gl_null),
    this.load = Gl_load,
    this.lockLayer = Gl_locklayer,
    this.unlockLayer = Gl_unlocklayer,
    this.moveLocks = Gl_moveLocks,
    this.dragType = Gl_dragtype,
    this.makeDraggable = Gl_makeDraggable,
    this.makeUndraggable = Gl_makeUndraggable,
    this.setZ = Gl_setz,
    this.hide = Gl_hide,
    this.show = Gl_show,
    this.setXlimits = Gl_setxlimits,
    this.setYlimits = Gl_setylimits,
    this.follow = Gl_layerfollow,
    this.stopFollowing = Gl_stoplayerfollow,
    this.Gl_index = Gl_layer_index++,
    Gl_layers[Gl_layers.length] = this,
    this
}
function genDiv(a, b, c, d, f, e, g) {
    var h, k;
    return Gl_browser.ns4 ? (document[d + f] = g ? h = new Layer(c,g) : h = new Layer(c),
    h.name = f,
    h.height = 0,
    h.left = a,
    h.top = b,
    h.layers = [],
    h.zIndex = f,
    h.visibility = "show",
    h.document.open(),
    h.document.write(e),
    h.document.close(),
    h) : Gl_browser.ie ? (g ? g.insertAdjacentHTML("BeforeEnd", '<div id="' + d + f + '" style="position:absolute;left:' + a + ";top:" + b + ";width:" + c + ";visibility:visible;z-index:" + f + '">\n' + e + "\n</div>\n") : document.body.insertAdjacentHTML("BeforeEnd", '<div id="' + d + f + '" style="position:absolute;left:' + a + ";top:" + b + ";width:" + c + ";visibility:visible;overflow:hidden;z-index:" + f + '">\n' + e + "\n</div>\n"),
    document.all[d + f]) : Gl_browser.dom2 ? (k = document.createElement("DIV"),
    k.setAttribute("style", "position:absolute;left:-1000px;top:-1000px;overflow:hidden;z-index:" + f),
    k.setAttribute("id", d + f),
    k.style.left = "-1000px",
    k.innerHTML = e + "\n",
    g ? g.appendChild(k) : document.getElementsByTagName("body").item(0).appendChild(k),
    k.style.position = "absolute",
    k.style.left = a + "px",
    k.style.top = b + "px",
    k.style.width = c + "px",
    document.getElementById(d + f)) : void 0
}
function Gl_setbackgroundNS(a) {
    this.ob.background.src = a
}
function Gl_setbackgroundIE(a) {
    this.ob.backgroundImage = "url(" + a + ")"
}
function Gl_makeDraggable() {
    this.draggable = !0
}
function Gl_makeUndraggable() {
    this.draggable = !1;
    this.dragnormal = !0
}
function Gl_layerresizeIE(a, b) {
    this.ob.width = a;
    this.ob.height = b;
    this.ob.clip = "rect(0 " + a + " " + b + " 0)";
    this.width = a;
    this.height = b;
    this.clipped = !0;
    this.cliptop = 0;
    this.clipbottom = b;
    this.clipleft = 0;
    this.clipright = a
}
function Gl_layerresizeNS(a, b) {
    this.ob.width = a;
    this.ob.height = b;
    this.ob.clip.left = 0;
    this.ob.clip.right = a;
    this.ob.clip.top = 0;
    this.ob.clip.bottom = b;
    this.width = a;
    this.height = b;
    this.clipped = !0;
    this.cliptop = 0;
    this.clipbottom = b;
    this.clipleft = 0;
    this.clipright = a
}
function Gl_layerresizeDOM2(a, b) {
    this.ob.width = a + "px";
    this.ob.height = b + "px";
    this.ob.clip = "rect(0px," + a + "px," + b + "px,0px)";
    this.width = a;
    this.height = b;
    this.clipped = !0;
    this.cliptop = 0;
    this.clipbottom = b;
    this.clipleft = 0;
    this.clipright = a
}
function Gl_layerfollow(a, b, c) {
    this.followingx = b;
    this.followingy = c;
    a.alive ? (this.following = a,
    this.draggable = !1,
    a.followedby[a.followedby.length] = this,
    a.beingfollowed = !0) : alert("Error!\nLayer cannot follow object (not a sprite or mouse!). Check code!")
}
function Gl_stoplayerfollow() {
    for (var a = !1, b = 0; b < this.following.followedby.length; b++)
        if (this.following.followedby[b] == this) {
            a = !0;
            break
        }
    if (a) {
        for (a = b; a < this.following.followedby.length - 1; a++)
            this.following.followedby[a] = this.following.followedby[a + 1];
        0 == --this.following.followedby.length && (this.following.beingfollowed = !1)
    }
}
function Gl_layerwriteIE(a) {
    this.innerHTML = a;
    this.clipped ? this.raw.innerHTML = a + "\n" : (this.resizeTo(0, 0),
    this.raw.innerHTML = a + "\n",
    this.width = this.raw.scrollWidth,
    this.height = this.raw.scrollHeight,
    this.resizeTo(this.width, this.height),
    this.clipped = !1,
    this.moveTo(this.x, this.y))
}
function Gl_layerwriteDOM2(a) {
    this.innerHTML = a;
    this.clipped ? this.raw.innerHTML = a + "\n" : (this.raw.innerHTML = a,
    setTimeout("Gl_layerwriteDOM2delay(" + this.index + ")", 10))
}
function Gl_layerwriteDOM2delay(a) {
    a = Gl_layers[a];
    a.width = a.raw.offsetWidth;
    a.height = a.raw.offsetHeight;
    a.ob.width = a.width;
    a.clipped = !1;
    a.moveTo(a.x, a.y)
}
function Gl_layerappendIE(a, b) {
    b && b < this.innerHTML.length ? (this.innerHTML = a = this.innerHTML.substring(0, b) + a + this.innerHTML.substring(b, this.innerHTML.length),
    this.raw.innerHTML = a) : (this.innerHTML += a,
    this.raw.innerHTML = this.innerHTML);
    this.clipped || (this.width = this.raw.clientWidth,
    this.height = this.raw.clientHeight,
    this.moveTo(this.x, this.y))
}
function Gl_layerappendNS(a, b) {
    this.innerHTML = b && b < this.innerHTML.length ? this.innerHTML.substring(0, b) + a + this.innerHTML.substring(b, this.innerHTML.length) : this.innerHTML + a;
    this.ob.document.open();
    this.ob.document.write(this.innerHTML);
    this.ob.document.close();
    this.clipped || (this.width = this.raw.clip.width,
    this.height = this.raw.clip.height,
    this.moveTo(this.x, this.y))
}
function Gl_layerwriteNS(a) {
    this.ob.width = 0;
    this.ob.height = 0;
    this.ob.document.open();
    this.ob.document.write(a);
    this.ob.document.close();
    this.innerHTML = a;
    this.clipped || (this.width = this.raw.clip.width,
    this.height = this.raw.clip.height,
    this.moveTo(this.x, this.y))
}
function Gl_movetoNS(a, b) {
    a > this.xmax - this.width && (a = this.xmax - this.width);
    b > this.ymax - this.height && (b = this.ymax - this.height);
    a < this.xmin && (a = this.xmin);
    b < this.ymin && (b = this.ymin);
    this.ob.moveTo(a, b);
    this.x = a;
    this.y = b;
    0 < this.lock.length && this.moveLocks()
}
function Gl_movetoIE(a, b) {
    a > this.xmax - this.width && (a = this.xmax - this.width);
    b > this.ymax - this.height && (b = this.ymax - this.height);
    a < this.xmin && (a = this.xmin);
    b < this.ymin && (b = this.ymin);
    this.ob.posTop = b;
    this.x = this.ob.posLeft = a;
    this.y = b;
    0 < this.lock.length && this.moveLocks()
}
function Gl_movetoDOM2(a, b) {
    a > this.xmax - this.width && (a = this.xmax - this.width);
    b > this.ymax - this.height && (b = this.ymax - this.height);
    a < this.xmin && (a = this.xmin);
    b < this.ymin && (b = this.ymin);
    this.ob.top = b + "px";
    this.ob.left = a + "px";
    this.x = a;
    this.y = b;
    0 < this.lock.length && this.moveLocks()
}
function Gl_moveLocks() {
    for (var a = 0; a < this.lock.length; a++)
        this.lock[a].moveTo(this.x + this.lockxoff[a], this.y + this.lockyoff[a])
}
function Gl_setxlimits(a, b) {
    this.xmin = a;
    this.xmax = b;
    this.x < this.xmin ? this.x = this.xmin : this.x + this.width > this.xmax && (this.x = this.xmax - this.width);
    this.moveTo(this.x, this.y)
}
function Gl_setylimits(a, b) {
    this.ymin = a;
    this.ymax = b;
    this.y < this.ymin ? this.y = this.ymin : this.y + this.height > this.ymax && (this.y = this.ymax - this.height);
    this.moveTo(this.x, this.y)
}
function Gl_setz(a) {
    this.z = this.ob.zIndex = a
}
function Gl_show() {
    this.ob.visibility = "visible"
}
function Gl_hide() {
    this.ob.visibility = "hidden"
}
function Gl_get_heightIE() {
    return this.raw.clientHeight
}
function Gl_get_heightNS() {
    return this.raw.clip.height
}
function Gl_get_widthIE() {
    return this.raw.clientWidth
}
function Gl_get_widthNS() {
    return this.raw.clip.width
}
function Gl_obclipNS(a, b, c, d) {
    this.ob.clip.left = a;
    this.ob.clip.right = b;
    this.ob.clip.top = c;
    this.ob.clip.bottom = d;
    this.clipleft = a;
    this.cliptop = c;
    this.clipright = b;
    this.clipbottom = d;
    this.clipped = !0
}
function Gl_obclipIE(a, b, c, d) {
    this.ob.clip = "rect(" + c + "," + b + "," + d + "," + a + ")";
    this.clipleft = a;
    this.cliptop = c;
    this.clipright = b;
    this.clipbottom = d;
    this.clipped = !0
}
function Gl_obclipDOM2(a, b, c, d) {
    this.ob.clip = "rect(" + c + "px," + b + "px," + d + "px," + a + "px)";
    this.clipleft = a;
    this.cliptop = c;
    this.clipright = b;
    this.clipbottom = d;
    this.clipped = !0
}
function Gl_loaderAdd(a, b, c, d) {
    Gl_app = "";
    Gl_loadQueue[Gl_loadQueue.length] = a;
    Gl_loadQueue[Gl_loadQueue.length] = b;
    Gl_loadQueue[Gl_loadQueue.length] = c;
    Gl_loadQueue[Gl_loadQueue.length] = d || 60;
    Gl_loading || Gl_loadKick()
}
function Gl_loadKick() {
    if (Gl_loadIndex += 4,
    Gl_loadIndex >= Gl_loadQueue.length)
        Gl_loadIndex = -4,
        Gl_loading = !1,
        Gl_loadQueue = [];
    else {
        Gl_loading = !0;
        Gl_loadCL = Gl_loadQueue[Gl_loadIndex];
        Gl_loadCL.URL = Gl_loadQueue[Gl_loadIndex + 1];
        Gl_loadTime = Gl_loadQueue[Gl_loadIndex + 3];
        var a = Gl_loadQueue[Gl_loadIndex + 1] + (Gl_loadQueue[Gl_loadIndex + 2] ? "?" + Math.random() : "");
        Gl_browser.ie ? (Gl_ieframe.document.body && (Gl_ieframe.document.body.innerHTML = ""),
        setTimeout('Gl_iebuffer.src="' + a + '"', 400)) : Gl_browser.dom2 ? (Gl_iebuffer.innerHTML = "",
        Gl_iebuffer.src = a) : Gl_browser.ns4 && (Gl_loadCL.ob.height = 0,
        Gl_loadCL.ob.load(a, Gl_loadCL.width));
        Gl_loadTimer = setTimeout("Gl_loadWait()", 500)
    }
}
function Gl_loadWait() {
    if (0 == Gl_loadTime--)
        Gl_loadKick();
    else if (Gl_browser.ie && "complete" == Gl_ieframe.document.readyState.toLowerCase())
        Gl_loadCL.raw.innerHTML = "",
        Gl_loadCL.ob.height = 0,
        Gl_loadCL.ob.clientHeight = 0,
        Gl_loadCL.ob.scrollHeight = 0,
        Gl_loadCL.raw.innerHTML = Gl_ieframe.document.body.innerHTML,
        Gl_loadCL.innerHTML = Gl_ieframe.document.body.innerHTML,
        Gl_loadCL.width = Gl_loadCL.raw.scrollWidth,
        Gl_loadCL.height = Gl_loadCL.raw.scrollHeight,
        Gl_loadCL.ob.height = Gl_loadCL.height,
        Gl_loadCL.ob.width = Gl_loadCL.width,
        Gl_loadCL.moveTo(Gl_loadCL.x, Gl_loadCL.y),
        Gl_loadCL.clipped = !1,
        window.status = "Done",
        Gl_loadKick();
    else if (Gl_browser.ie || !Gl_browser.dom2 || null != window.document.readyState && "complete" != window.document.readyState)
        Gl_browser.ns4 && 0 < Gl_loadCL.ob.clip.height ? (Gl_loadCL.width = Gl_loadCL.ob.clip.width,
        Gl_loadCL.height = Gl_loadCL.ob.clip.height,
        Gl_loadCL.innerHTML = "",
        Gl_loadCL.moveTo(Gl_loadCL.x, Gl_loadCL.y),
        Gl_loadCL.clipped = !1,
        window.status = "Done",
        Gl_loadKick()) : setTimeout("Gl_loadWait()", 1E3);
    else {
        var a = "" + window.frames.buffer.document.body.innerHTML;
        Gl_loadCL.raw.innerHTML = a;
        Gl_loadCL.innerHTML = a;
        Gl_loadCL.width = Gl_loadCL.raw.offsetWidth;
        Gl_loadCL.height = Gl_loadCL.raw.offsetHeight;
        Gl_loadCL.moveTo(Gl_loadCL.x, Gl_loadCL.y);
        Gl_loadCL.clipped = !1;
        window.status = "Done";
        Gl_loadKick()
    }
}
function Gl_load(a, b, c) {
    Gl_loaderAdd(this, a, b, c)
}
function Gl_setbgcolorIE(a) {
    this.ob.backgroundColor = a
}
function Gl_setbgcolorNS(a) {
    this.ob.bgColor = a
}
function Gl_setOpacityIE(a) {
    100 > a && 0 < a ? (this.ob.filter = "alpha(opacity=" + a + ")",
    this.opacity = a) : (this.ob.filter = "",
    this.opacity = 100)
}
function Gl_setOpacityDOM2(a) {
    100 > a && 0 < a && (this.ob.MozOpacity = a + "%",
    this.opacity = a)
}
function Gl_locklayer(a) {
    for (var b = 0; b < this.lock.length; b++)
        if (this.lock[b] == a) {
            this.lockxoff[b] = a.x - this.x;
            this.lockyoff[b] = a.y - this.y;
            return
        }
    this.lock[this.lock.length] = a;
    this.lockxoff[this.lockxoff.length] = a.x - this.x;
    this.lockyoff[this.lockyoff.length] = a.y - this.y
}
function Gl_unlocklayer(a) {
    var b;
    if (a)
        for (b = 0; b < this.lock.length; b++) {
            if (this.lock[b] == a) {
                for (a = b; a < this.lock.length - 1; a++)
                    this.lock[a] = this.lock[a + 1];
                a = this.lock.length;
                this.lock[this.lock.length - 1] = null;
                this.lock.length = a - 1;
                break
            }
        }
    else
        this.lock = []
}
function Gl_dragtype(a) {
    this.dragnormal = this.dragvert = this.draghoriz = !1;
    0 == a || isNaN(a) && "normal" == a.toLowerCase() ? this.dragnormal = !0 : 1 == a || isNaN(a) && "vertical" == a.toLowerCase() ? this.dragvert = !0 : (2 == a || isNaN(a) && "horizontal" == a.toLowerCase()) && (this.draghoriz = !0)
}
function Gl_null() {}
function Gl_loop() {
    for (var a = null, b = Sp_xoffset != Sp_cxoffset || Sp_yoffset != Sp_cyoffset ? !0 : !1, c = 0; c < Sp_active.length; c++) {
        if (a = Sp_active[c],
        a.targetting ? a.gl_setDirection(a.targetting.x + a.targettingx, a.targetting.y + a.targettingy) : a.routing ? Math.round(a.x) == Math.round(a.routeToX) && Math.round(a.y) == Math.round(a.routeToY) ? (a.nextRP(),
        a.routing && a.gl_setDirection(a.routeToX, a.routeToY)) : a.gl_setDirection(a.routeToX, a.routeToY) : a.routingBR && (0 == --a.routeCnt && a.gl_setNextRBD(),
        1 == a.routeCI ? a.setXYdegs(a.xydegs - a.routeP2) : 2 == a.routeCI && a.setXYdegs(a.xydegs + a.routeP2)),
        a.x += a.xspeed,
        a.y += a.yspeed,
        (a.x != a.cx || a.y != a.cy || b) && (a.cx = a.x,
        a.cy = a.y,
        a.x + a.width > a.xmax && 0 < a.xdir ? a.bounces ? a.setDir(-a.xdir, a.ydir) : (a.x = a.xmax - a.width,
        a.setDir(0, a.ydir)) : a.x <= a.xmin && 0 > a.xdir && (a.bounces ? a.setDir(-a.xdir, a.ydir) : (a.x = a.xmin,
        a.setDir(0, a.ydir))),
        a.y + a.height > a.ymax && 0 < a.ydir ? a.bounces ? a.setDir(a.xdir, -a.ydir) : (a.y = a.ymax - a.height,
        a.setDir(a.xdir, 0)) : a.y <= a.ymin && 0 > a.ydir && (a.bounces ? a.setDir(a.xdir, -a.ydir) : (a.y = a.ymin,
        a.setDir(a.xdir, 0)))),
        a.beingfollowed)
            for (Sp_x = 0; Sp_x < a.followedby.length; Sp_x++)
                Sp_a = a.followedby[Sp_x],
                Sp_a.moveTo(a.x + Sp_a.followingx, a.y + Sp_a.followingy);
        0 < a.animspd && 1 > --a.animtmr && a.crepeat != a.animrepeat ? (a.animtmr = a.animspd,
        a.animpos += a.animd,
        0 > a.animpos ? (a.animpos = a.animsend - 1,
        -1 != a.animrepeat && a.crepeat++) : a.animpos == a.animsend && (a.animpos = a.animsstart,
        -1 != a.animrepeat && a.crepeat++),
        a.crepeat != a.animrepeat && a.setAnimation(a.animpos)) : a.moveTo_l()
    }
    Sp_cxoffset = Sp_xoffset;
    Sp_cyoffset = Sp_yoffset;
    for (c = 0; c < Gl_hooked.length; c++)
        eval(Gl_hooked[c]);
    Sp_spritesonscreen = Sp_active.length;
    Gl_ticker++;
    Gl_browser.ns4 && Gl_running && (Gl_interval = setTimeout("Gl_loop()", Gl_timerSpeed))
}
function Gl_getBrowser() {
    this.version = 1;
    this.ie = this.ie5 = this.ie6 = this.ns = this.ns4 = this.ns6 = this.unix = this.webtv = this.apple = this.dom2 = !1;
    this.panic = !0;
    var a = navigator.userAgent.toLowerCase()
      , b = parseInt(navigator.appVersion);
    return -1 != a.indexOf("opera") ? this : -1 != a.indexOf("webtv") && document.all ? (this.webtv = !0,
    this) : ((-1 != a.indexOf("mac") || -1 != a.indexOf("apple")) && (this.apple = !0),
    -1 != navigator.userAgent.indexOf("X11") && (this.unix = !0),
    -1 != a.indexOf("msie") ? (document.all && (this.version = 4,
    this.ie = !1,
    this.panic = !1),
    -1 != a.indexOf("msie 5") && (this.version = 5,
    this.ie5 = !0,
    this.dom2 = !0,
    this.panic = !1),
    -1 != a.indexOf("msie 6") && (this.version = 6,
    this.ie6 = !0,
    this.dom2 = !0,
    this.panic = !1),
    -1 != a.indexOf("msie 7") && (this.version = 7,
    this.ie7 = !0,
    this.dom2 = !0,
    this.panic = !1)) : -1 != a.indexOf("mozilla") && (this.ns = !0,
    4 == b ? (this.version = 4,
    this.ns4 = !0,
    this.panic = !1) : !this.ie && this.ns && 4 < b && (this.version = 6,
    this.ns6 = !0,
    this.dom2 = !0,
    this.panic = !1)),
    document.getElementById && (1 == this.version && (this.version = 6),
    this.dom2 = !0,
    this.panic = !1),
    this)
}
function Gl_styleSheet() {
    document.write('<style type="text/css">\n</style>')
}
function Gl_calibrate(a, b) {
    Gl_callBack = a;
    a = genDiv(0, 0, 200, "STdiv", Gl_layer_index++, '<table border=0><tr><td bgcolor="#444444" NOWRAP><font color="#ffffff" face="sans-serif" size=3>Gamelib Speed Calibration</font></td></tr></table>');
    Gl_speedTestDiv = Gl_browser.ns4 ? a : a.style;
    Gl_n = 5 * b;
    Gl_fps = 1E3 / b;
    Gl_speedTestFinish = !1;
    Gl_STT = setInterval("Gl_speedTestFinish=true", 5E3);
    setTimeout("Gl_speedTestLoop()", 1)
}
function Gl_speedTestLoop() {
    Gl_browser.panic ? Gl_alert("Gl_speedTestLoop()", "Error! Could not start speed test!") : (Gl_speedTestDiv.top = 85 - Math.floor(100 * Math.cos(3.14159 * (250 - Gl_n) / 180)),
    Gl_n--,
    Gl_speedTestFinish ? (Gl_timerSpeed = Gl_fps - Math.round(Gl_n / 5),
    Gl_speedTestDiv.top = -100,
    Gl_speedTestDiv.visibility = "hidden",
    setTimeout(Gl_callBack, 1)) : setTimeout("Gl_speedTestLoop()", Gl_fps))
}
function Gl_alert(a, b) {
    Gl_browser.panic = !0;
    alert('Gamelib Alert: Error using method "' + a + '"\n\n' + b);
    Gl_stop()
}
function Sp_groupClearTrigger(a) {
    Sp_groupHitTriggerFunc[a] = null;
    Sp_groupHitTriggerCount[a] = 0
}
function Sp_groupSetTrigger(a, b, c) {
    Sp_groupHitTriggerFunc[a] = c;
    Sp_groupHitTriggerCount[a] = b
}
function Sp_groupReset(a) {
    Sp_groupHitTriggerCount[a] = 0
}
function Sp_groupGetMembers(a) {
    for (var b = [], c = 0; c < Sp_totalsprites; c++)
        Sp_sprite[c].group == a && (b[b.length] = Sp_sprite[c]);
    return b
}
function Sp_Sprite() {
    var a = !1
      , b = Sp_getDeadSprite();
    return (b ? a = !0 : b = this,
    b.on = !1,
    b.off = !1,
    b.state = 0,
    b.x = 0,
    b.y = -1E3,
    b.iX = 0,
    b.iY = -1E3,
    b.cx = 0,
    b.cy = 0,
    b.z = Gl_layer_index,
    b.zDiffMax = 1E10,
    b.xmin = 0,
    b.xmax = 100,
    b.ymin = 0,
    b.ymax = 100,
    b.bounces = !1,
    b.frame = 0,
    b.framewidth = 0,
    b.frameheight = 0,
    b.animframes = 0,
    b.animpos = 0,
    b.anims = 0,
    b.animsstart = 0,
    b.animsend = 0,
    b.animdir = "forward",
    b.animd = 1,
    b.animspd = 0,
    b.animtmr = 0,
    b.animrepeat = -1,
    b.crepeat = 0,
    b.width = 0,
    b.height = 0,
    b.owidth = 0,
    b.oheight = 0,
    b.xdir = 0,
    b.ydir = 0,
    b.xydegs = -1,
    b.speed = 0,
    b.xspeed = 0,
    b.yspeed = 0,
    b.cAl = 0,
    b.cAt = 0,
    b.cAr = 0,
    b.cAb = 0,
    b.usingCollisionArea = !1,
    b.mouse = !0,
    b.onmouseover = "",
    b.onmouseout = "",
    b.onclickdown = "",
    b.onclickup = "",
    b.draggable = !1,
    b.dragnormal = !0,
    b.dragvert = !1,
    b.draghoriz = !1,
    b.collides = !1,
    b.group = 0,
    b.value = 0,
    b.shieldPower = 0,
    b.hit = null,
    b.totalhits = 0,
    b.hitarray = [],
    b.image = "",
    b.isstatic = !1,
    b.hard = !1,
    b.alive = !0,
    a || (b.index = Gl_layer_index),
    b.targetting = null,
    b.targettingx = 0,
    b.targettingy = 0,
    b.routing = !1,
    b.routingBR = !1,
    b.routeLoop = !1,
    b.routeCnt = 0,
    b.routeCI = "",
    b.routePos = 0,
    b.routeP1 = 0,
    b.routeP2 = 0,
    b.route = [],
    b.routeToX = 0,
    b.routeToY = 0,
    b.hitevents = !1,
    b.hitevent = [],
    b.hardhitevent = "",
    b.following = null,
    b.followingx = 0,
    b.followingy = 0,
    b.isfollowing = null,
    b.followedby = [],
    b.beingfollowed = !1,
    b.destroyed = !1,
    a) ? b : (b.setZ = Sp_setz,
    b.setDir = Sp_setdir,
    b.hasHit = Sp_hashit,
    b.setXlimits = Sp_setxlimits,
    b.setYlimits = Sp_setylimits,
    b.setSpeed = Sp_setspeed,
    b.setXYdegs = Sp_setxydegs,
    b.getXYdegs = Sp_getxydegs,
    b.switchOff = Sp_switchoff,
    b.makeHard = Sp_makehard,
    b.makeStatic = Sp_makestatic,
    b.makeNormal = Sp_makenormal,
    b.dragType = Sp_dragtype,
    b.setAnimationSpeed = Sp_setanimspd,
    b.setAnimationLoop = Sp_setanimloop,
    b.setAnimationRepeat = Sp_setanimrepeat,
    b.check_collide = Sp_check_collide,
    b.useHitEvents = Sp_useHitEvents,
    b.setHitEvent = Sp_setHitEvent,
    b.setHardHitEvent = Sp_setHardHitEvent,
    b.follow = Sp_follow,
    b.stopFollowing = Sp_stopfollow,
    b.target = Sp_target,
    b.stopTargetting = Sp_stopTargetting,
    b.setCollides = Sp_setCollides,
    b.setCollide = Sp_setCollides,
    b.makeDraggable = Sp_makeDraggable,
    b.makeUndraggable = Sp_makeUndraggable,
    b.setFrameByDirection = Sp_setFrameByDirection,
    b.clearFrameByDirection = Sp_clearFrameByDirection,
    b.setRoute = Sp_setRoute,
    b.setRouteByCommand = Sp_setRouteByCommand,
    b.clearRoute = Sp_clearRoute,
    b.clearRouteLoop = Sp_clearRouteLoop,
    b.setCollisionArea = Sp_setCollisionArea,
    b.clearCollisionArea = Sp_clearCollisionArea,
    b.nextRP = Sp_nextRP,
    b.gl_setDirection = Sp_Gl_setDirection,
    b.gl_setNextRBD = Sp_Gl_setNextRBD,
    b.groupHit = Sp_groupHit,
    b.groupSet = Sp_groupSet,
    b.setValue = Sp_setValue,
    b.getHits = Sp_getHits,
    b.setCollisionZTest = Sp_setCollisionZTest,
    b.destroy = Sp_destroy,
    Gl_browser.ie ? (document.body.insertAdjacentHTML("BeforeEnd", '<img src="" id="Sp_i' + Gl_layer_index + '" name="Sp_i' + Gl_layer_index + '" style="position: absolute; left:-1000px; top:0px;">'),
    b.raw = document.images["Sp_i" + Gl_layer_index],
    b.ob = document.images["Sp_i" + Gl_layer_index].style,
    b.moveto = Sp_movetoIE,
    b.moveTo = Sp_movetoIE,
    b.moveTo_l = Sp_movetoIE_l,
    b.setImage = Sp_setimageIE,
    b.swapImage = Sp_swapimageIE,
    b.setFrame = Sp_setframeIE,
    b.setAnimation = Sp_setanimIE,
    b.resize = Sp_linuxcompatible ? Gl_null : Sp_resizeIE,
    b.switchOn = Sp_switchonIE,
    b.setOpacity = Sp_setOpacityIE) : Gl_browser.dom2 ? (Sp_linuxcompatible ? (b.raw = document.createElement("DIV"),
    b.moveto = Sp_movetoDOM2,
    b.moveTo = Sp_movetoDOM2,
    b.moveTo_l = Sp_movetoDOM2_l,
    b.setFrame = Sp_setframeDOM2,
    b.setAnimation = Sp_setanimDOM2,
    b.setImage = Sp_setimageDOM2,
    b.resize = Gl_null) : (b.raw = document.createElement("IMG"),
    b.moveto = Sp_movetoIE,
    b.moveTo = Sp_movetoIE,
    b.moveTo_l = Sp_movetoIE_l,
    b.setFrame = Sp_setframeIE,
    b.setAnimation = Sp_setanimIE,
    b.setImage = Sp_setimageIE,
    b.resize = Sp_resizeIE),
    document.getElementsByTagName("body").item(0).appendChild(this.raw),
    b.raw.style.position = "absolute",
    b.raw.style.overflow = "hidden",
    b.ob = this.raw.style,
    b.swapImage = Sp_swapimageDOM2,
    b.switchOn = Sp_switchonDOM2,
    b.setOpacity = Sp_setOpacityDOM2) : Gl_browser.ns4 && (b.ob = genDiv(-1E3, 0, this.width, "Sp_i", Gl_layer_index, ""),
    b.ob.height = this.height,
    b.ob.clip.height = this.height,
    b.moveto = Sp_movetoNS,
    b.moveTo = Sp_movetoNS,
    b.moveTo_l = Sp_movetoNS_l,
    b.setImage = Sp_setimageNS,
    b.swapImage = Sp_swapimageNS,
    b.setFrame = Sp_setframeNS,
    b.setAnimation = Sp_setanimNS,
    b.resize = Sp_linuxcompatible ? Gl_null : Sp_resizeNS,
    b.switchOn = Sp_switchonNS,
    b.setOpacity = Gl_null),
    Gl_layers[Gl_layers.length] = b,
    Sp_sprite[Sp_totalsprites] = b,
    Sp_totalsprites++,
    Gl_layer_index++,
    b)
}
function Sp_getDeadSprite() {
    for (var a = 0; a < Sp_sprite.length; a++)
        if (Sp_sprite[a].destroyed)
            return Sp_sprite[a];
    return !1
}
function Sp_setCollisionArea(a, b, c, d) {
    this.usingCollisionArea = !0;
    this.cAl = a;
    this.cAt = c;
    this.cAr = this.width - 1 - b;
    this.cAb = this.height - 1 - d
}
function Sp_clearCollisionArea() {
    this.usingCollisionArea = !1;
    this.cAt = this.cAl = 0;
    this.cAr = this.width - 1;
    this.cAb = this.height - 1
}
function Sp_Gl_setNextRBD() {
    (this.routeCnt = 1,
    this.routePos += 3,
    this.routePos > this.route.length && (this.routeLoop ? (this.x = Math.round(this.x),
    this.y = Math.round(this.y),
    this.routePos = 0) : this.routeBR = !1),
    this.routeCI = this.route[this.routePos],
    this.routeP1 = this.route[this.routePos + 1],
    this.routeP2 = this.route[this.routePos + 2],
    0 == this.routeCI) ? this.moveTo(this.routeP1, this.routeP2) : 3 > this.routeCI ? this.routeCnt = this.routeP1 : 3 == this.routeCI ? this.setXYdegs(this.routeP1) : 4 == this.routeCI ? this.setSpeed(this.routeP1) : 5 == this.routeCI ? this.routeCnt = this.routeP1 : 6 == this.routeCI ? this.setXYdegs(this.xydegs - this.routeP1) : 7 == this.routeCI && this.setXYdegs(this.xydegs + this.routeP1)
}
function Sp_nextRP() {
    this.x = this.routeToX;
    this.y = this.routeToY;
    this.routePos += 2;
    this.routePos >= this.route.length && (this.routeLoop ? this.routePos = 0 : this.routing = !1);
    this.routeToX = this.route[this.routePos];
    this.routeToY = this.route[this.routePos + 1]
}
function Sp_Gl_setDirection(a, b) {
    var c = 0
      , d = 0
      , f = 0
      , e = this.x
      , g = this.y;
    Math.abs(e - a) > Math.abs(g - b) ? (c = Math.abs(e - a) < this.speed ? Math.abs(e - a) : this.speed,
    d = 0 != e - a ? e - a : 1,
    this.xdir = 0 < d ? -1 : 1,
    this.ydir = -(g - b) / Math.abs(d)) : (c = Math.abs(g - b) < this.speed ? Math.abs(g - b) : this.speed,
    f = 0 != g - b ? g - b : 1,
    this.ydir = 0 < f ? -1 : 1,
    this.xdir = -(e - a) / Math.abs(f));
    this.xydegs = Math.round((Math.atan2(-this.xdir, this.ydir) + 3.14159) / 6.28318 * 360) % 360;
    this.fbdSet && this.frame != this.fbd[this.xydegs] && this.setFrame(this.fbd[this.xydegs]);
    this.xspeed = this.xdir * c;
    this.yspeed = this.ydir * c
}
function Sp_setRouteByCommand(a, b) {
    this.routingBR = this.routing = !1;
    this.route = [];
    this.routeLoop = b;
    var c = "";
    for (b = 0; b < a.length; b++) {
        var d = a.charAt(b);
        -1 != "0123456789macsdfAC;,".indexOf(d) && (c += d)
    }
    ";" == c.charAt(c.length - 1) && (c = c.substring(0, c.length - 1));
    var f, e, g;
    a = c.split(";");
    for (b = 0; b < a.length; b++) {
        if (e = this.route[3 * b] = "macdsfAC".indexOf(a[b].charAt(0)),
        -1 == e) {
            Gl_alert("setRouteByDirection()", 'Unknown command "' + a[b] + '" at index ' + b);
            return
        }
        if (2 < e) {
            if (f = a[b].substring(1, a[b].length),
            isNaN(f)) {
                Gl_alert("setRouteByDirection()", 'Illegal value "' + f + '" found at index ' + b);
                return
            }
            this.route[3 * b + 1] = parseInt(f)
        } else {
            if (-1 == a[b].indexOf(",")) {
                Gl_alert("setRouteByDirection()", 'Illegal argument to command "' + e + '" (should have 2 arguments) found at index ' + b);
                return
            }
            if (f = a[b].substring(1, a[b].length),
            g = f.split(","),
            isNaN(g[0]) || isNaN(g[1])) {
                Gl_alert("setRouteByDirection()", 'Illegal argument to command "' + e + '" (should be integers) found at index ' + b);
                return
            }
            this.route[3 * b + 1] = parseInt(g[0]);
            this.route[3 * b + 2] = parseInt(g[1])
        }
    }
    this.routingBR = !0;
    this.routeCnt = 1;
    this.routeCI = 0;
    this.routePos = -3
}
function Sp_setRoute() {
    var a;
    if (this.routeToX = this.x,
    this.routeToY = this.y,
    this.routing = !0,
    this.routingBR = !1,
    this.routePos = -2,
    this.route = [],
    2 == arguments.length)
        for (this.routeLoop = arguments[0],
        a = 0; a < arguments[1].length; a++)
            this.route[a] = arguments[1][a];
    else if (1 < arguments.length)
        for (this.routeLoop = arguments[0],
        a = 1; a < arguments.length; a++)
            this.route[a - 1] = arguments[a];
    else
        for (this.routeLoop = arguments[0][0],
        a = 1; a < arguments[0].length; a++)
            this.route[a - 1] = arguments[0][a]
}
function Sp_clearRoute() {
    this.routing = this.routingBR = !1
}
function Sp_clearRouteLoop() {
    this.routeLoop = !1
}
function Sp_useHitEvents(a) {
    this.hitevents = a
}
function Sp_setHitEvent(a, b) {
    "" == b && (b = !1);
    this.hitevent[a.index] = b
}
function Sp_setHardHitEvent(a) {
    this.hardhitevent = "" != a ? a : !1
}
function Sp_follow(a, b, c) {
    this.following || (this.followingx = b,
    this.followingy = c,
    a.alive ? (this.following = a,
    this.draggable = !1,
    this.targetting = null,
    a.followedby[a.followedby.length] = this,
    a.beingfollowed = !0) : alert("Error!\nLayer cannot follow object (not a sprite or mouse!). Check code!"))
}
function Sp_setFrameByDirection() {
    var a, b = arguments.length;
    if (Math.floor(b / 3) != b / 3)
        alert("Error! setFrameByDirection() called with wrong number of arguments. Please check docs!");
    else {
        if (!this.fbdSet) {
            this.fbd = [];
            for (a = 0; 360 > a; a++)
                this.fbd[a] = -1;
            this.fbdSet = !0
        }
        for (a = 0; a < b; a += 3) {
            var c = Math.round(arguments[a]);
            var d = Math.round(arguments[a + 1] + 1);
            359 < c && (c = 359);
            360 < d && (d = 360);
            0 > c && (c = 0);
            for (0 > d && (d = 0); c < d; c++)
                this.fbd[c] = arguments[a + 2]
        }
    }
}
function Sp_clearFrameByDirection() {
    this.fbd = null;
    this.fbdSet = !1
}
function Sp_stopfollow() {
    var a;
    if (this.following) {
        var b = !1;
        for (a = 0; a < this.following.followedby.length; a++)
            if (this.following.followedby[a] == this) {
                b = !0;
                break
            }
        if (b) {
            for (b = a; b < this.following.followedby.length - 1; b++)
                this.following.followedby[b] = this.following.followedby[b + 1];
            this.following.followedby[this.following.followedby.length - 1] = null;
            this.following.followedby.length--;
            0 == this.following.followedby.length && (this.following.beingfollowed = !1)
        }
        this.following = null
    }
}
function Sp_target(a, b, c) {
    this.targetting = a;
    this.targettingx = b || 0;
    this.targettingy = c || 0
}
function Sp_stopTargetting(a) {
    this.targetting = null;
    this.targettingy = this.targettingx = 0;
    a && "drift" == a.toLowerCase() || (this.xspeed = 0,
    this.yspeed = 0,
    this.xdir = 0,
    this.ydir = 0,
    this.speed = 0)
}
function Sp_setCollides(a) {
    (this.collides = a) || (this.hitarray = [],
    this.hit = null)
}
function Sp_setz(a) {
    this.z = a;
    this.ob.zIndex = a
}
function Sp_setdir(a, b) {
    this.xdir = a;
    this.ydir = b;
    this.xydegs = -1;
    this.xspeed = this.xdir * this.speed;
    this.yspeed = this.ydir * this.speed;
    this.fbdSet && (this.xydegs = Math.round((Math.atan2(-a, b) + 3.14159) / 6.28318 * 360),
    this.frame != this.fbd[this.xydegs] && this.setFrame(this.fbd[this.xydegs]))
}
function Sp_getxydegs() {
    return -1 == this.xydegs && (this.xydegs = Math.round((Math.atan2(-this.xdir, this.ydir) + 3.14159) / 6.28318 * 360)),
    this.xydegs
}
function Sp_setxydegs(a) {
    a = Math.floor(a) % 360;
    0 > a && (a = 360 + a);
    this.xydegs = a;
    this.xdir = Gl_sin[a];
    this.ydir = Gl_cos[a];
    this.xspeed = this.xdir * this.speed;
    this.yspeed = this.ydir * this.speed;
    this.fbdSet && -1 < this.fbd[a] && this.frame != this.fbd[a] && this.setFrame(this.fbd[a])
}
function Sp_setxlimits(a, b) {
    this.xmin = a;
    this.xmax = b;
    this.x < this.xmin ? this.x = this.xmin : this.x + this.width > this.xmax && (this.x = this.xmax)
}
function Sp_setylimits(a, b) {
    this.ymin = a;
    this.ymax = b;
    this.y < this.ymin ? this.y = this.ymin : this.y + this.height > this.ymax && (this.y = this.ymax)
}
function Sp_setframeIE(a) {
    this.animpos = this.animsstart;
    this.animtmr = this.animspd;
    this.animrepeat = -1;
    this.frame = a;
    this.ob.clip = "rect(" + this.animpos * this.frameheight + "," + (a * this.framewidth + this.framewidth) + "," + (this.animpos + 1) * this.frameheight + "," + a * this.framewidth + ")";
    this.off || (this.iX = Math.round(this.x),
    this.iY = Math.round(this.y),
    this.ob.left = this.iX + Sp_xoffset - this.frame * this.framewidth,
    this.ob.top = this.iY + Sp_yoffset - this.animpos * this.frameheight)
}
function Sp_setframeDOM2(a) {
    this.animpos = this.animsstart;
    this.animtmr = this.animspd;
    this.frame = a;
    this.off || (this.iX = Math.round(this.x),
    this.iY = Math.round(this.y),
    this.ob.left = this.iX + Sp_xoffset + "px",
    this.ob.top = this.iY + Sp_yoffset + "px");
    this.ob.backgroundPosition = -(a * this.framewidth) + "px " + -(this.animpos * this.frameheight) + "px"
}
function Sp_setframeNS(a) {
    this.animpos = this.animsstart;
    this.animtmr = this.animspd;
    this.frame = a;
    this.iX = Math.round(this.x);
    this.iY = Math.round(this.y);
    this.ob.clip.left = a * this.framewidth;
    this.ob.clip.right = a * this.framewidth + this.framewidth;
    this.ob.clip.top = this.animpos * this.frameheight;
    this.ob.clip.bottom = (this.animpos + 1) * this.frameheight;
    this.off || this.ob.moveTo(this.iX + Sp_xoffset - this.frame * this.framewidth, this.iY + Sp_yoffset - this.animpos * this.frameheight)
}
function Sp_setanimIE(a) {
    a > this.animsend ? a = this.animsend : a < this.animsstart && (a = this.animsstart);
    this.animpos = a;
    this.iX = Math.round(this.x);
    this.iY = Math.round(this.y);
    this.ob.clip = "rect(" + this.animpos * this.frameheight + "," + (this.frame * this.framewidth + this.framewidth) + "," + (this.animpos * this.frameheight + this.frameheight) + "," + this.frame * this.framewidth + ")";
    this.ob.left = this.iX + Sp_xoffset - this.frame * this.framewidth;
    this.ob.top = this.iY + Sp_yoffset - this.animpos * this.frameheight;
    this.collides && this.check_collide()
}
function Sp_setanimDOM2(a) {
    a > this.animsend ? a = this.animsend : a < this.animsstart && (a = this.animsstart);
    this.animpos = a;
    this.iX = Math.round(this.x);
    this.iY = Math.round(this.y);
    this.ob.left = this.iX + Sp_xoffset + "px";
    this.ob.top = this.iY + Sp_yoffset + "px";
    this.ob.backgroundPosition = -(this.frame * this.framewidth) + "px " + -(this.animpos * this.frameheight) + "px";
    this.collides && this.check_collide()
}
function Sp_setanimNS(a) {
    a > this.animsend ? a = this.animsend : a < this.animsstart && (a = this.animsstart);
    this.animpos = a;
    this.iX = Math.round(this.x);
    this.iY = Math.round(this.y);
    this.ob.clip.top = this.animpos * this.frameheight;
    this.ob.clip.left = this.frame * this.framewidth;
    this.ob.clip.right = this.frame * this.framewidth + this.framewidth;
    this.ob.clip.bottom = this.animpos * this.frameheight + this.frameheight;
    this.ob.moveTo(this.iX + Sp_xoffset - this.frame * this.framewidth, this.iY + Sp_yoffset - this.animpos * this.frameheight);
    this.collides && this.check_collide()
}
function Sp_movetoIE(a, b) {
    a > this.xmax - this.width ? a = this.xmax - this.width : a < this.xmin && (a = this.xmin);
    b > this.ymax - this.height ? b = this.ymax - this.height : b < this.ymin && (b = this.ymin);
    this.iX = Math.round(a);
    this.iY = Math.round(b);
    this.x = a;
    this.y = b;
    this.ob.top = this.iY + Sp_yoffset - this.animpos * this.frameheight;
    this.ob.left = this.iX + Sp_xoffset - this.frame * this.framewidth;
    this.collides && this.check_collide()
}
function Sp_movetoDOM2(a, b) {
    a > this.xmax - this.width ? a = this.xmax - this.width : a < this.xmin && (a = this.xmin);
    b > this.ymax - this.height ? b = this.ymax - this.height : b < this.ymin && (b = this.ymin);
    this.iX = Math.round(a);
    this.iY = Math.round(b);
    this.ob.top = this.iY + Sp_yoffset + "px";
    this.ob.left = this.iX + Sp_xoffset + "px";
    this.x = a;
    this.y = b;
    this.collides && this.check_collide()
}
function Sp_movetoNS(a, b) {
    a > this.xmax - this.width ? a = this.xmax - this.width : a < this.xmin && (a = this.xmin);
    b > this.ymax - this.height ? b = this.ymax - this.height : b < this.ymin && (b = this.ymin);
    this.iX = Math.round(a);
    this.iY = Math.round(b);
    this.ob.moveTo(this.iX + Sp_xoffset - this.frame * this.framewidth, this.iY + Sp_yoffset - this.animpos * this.frameheight);
    this.x = a;
    this.y = b;
    this.collides && this.check_collide()
}
function Sp_movetoIE_l() {
    this.iX = Math.round(this.x);
    this.iY = Math.round(this.y);
    this.ob.left = this.iX + Sp_xoffset - this.frame * this.framewidth;
    this.ob.top = this.iY + Sp_yoffset - this.animpos * this.frameheight;
    this.collides && this.check_collide()
}
function Sp_movetoDOM2_l() {
    this.iX = Math.round(this.x);
    this.iY = Math.round(this.y);
    this.ob.left = this.iX + Sp_xoffset + "px";
    this.ob.top = this.iY + Sp_yoffset + "px";
    this.collides && this.check_collide()
}
function Sp_movetoNS_l() {
    this.iX = Math.round(this.x);
    this.iY = Math.round(this.y);
    this.ob.moveTo(this.iX + Sp_xoffset - this.frame * this.framewidth, this.iY + Sp_yoffset - this.animpos * this.frameheight);
    this.collides && this.check_collide()
}
function Sp_check_collide() {
    var a = this.iX + this.cAl
      , b = this.iY + this.cAt
      , c = this.iX + this.cAr
      , d = this.iY + this.cAb
      , f = 0
      , e = Sp_active.length;
    this.hit = null;
    this.hitarray = [];
    for (this.totalhits = 0; f < e; f++) {
        var g = Sp_active[f];
        g != this && Math.abs(g.z - this.z) < this.zDiffMax && (a > g.x + g.cAr || c < g.iX + g.cAl || b > g.y + g.cAb || d < g.iY + g.cAt || (this.hit = this.hitarray[this.totalhits++] = g,
        this.hitevents && this.hitevent[g.index] && (eval(this.hitevent[g.index]),
        e = Sp_active.length),
        g.hard && (Sp_moveBack(this, g),
        this.hitevents && this.hardhitevent && (eval(this.hardhitevent),
        e = Sp_active.length))))
    }
}
function Sp_moveBack(a, b) {
    if (a.collides = !1,
    a.moveTo(a.x + b.xspeed, a.y + b.yspeed),
    0 != a.xspeed || 0 != a.yspeed) {
        var c = 0, d = !0, f, e, g = b.iX + b.cAl, h = b.iY + b.cAt, k = b.iX + b.cAr;
        b = b.iY + b.cAb;
        for (Math.abs(a.xspeed) > Math.abs(a.yspeed) ? (f = 0 < a.xspeed ? -1 : 1,
        e = 0 < a.yspeed ? Math.abs(a.yspeed / a.xspeed) : -Math.abs(a.yspeed / a.xspeed)) : (e = 0 < a.yspeed ? -1 : 1,
        f = 0 < a.xspeed ? Math.abs(a.xspeed / a.yspeed) : -Math.abs(a.xspeed / a.yspeed)); d && 50 > c++; )
            a.moveTo(a.x + f, a.y + e),
            d = !(a.iX + a.cAl > k || a.iX + a.cAr < g || a.iY + a.cAt > b || a.iY + a.cAb < h)
    }
    a.collides = !0
}
function Sp_hashit(a) {
    for (var b = 0; b < this.totalhits; b++)
        if (this.hitarray[b] == a)
            return !0;
    return !1
}
function Sp_setanimspd(a, b) {
    b && (b = b.toLowerCase(),
    this.animd = "forward" == b ? 1 : -1);
    this.crepeat = 0;
    this.animtmr = this.animspd = a
}
function Sp_setanimloop(a, b) {
    a > this.anims ? a = this.anims - 1 : 0 > a && (a = 0);
    b > this.anims && (b = this.anims);
    b < a && (b = a);
    this.animsstart = a;
    this.animsend = b
}
function Sp_setimageIE(a, b, c, d, f) {
    var e = this.raw;
    e.src = a;
    e.width = b * d;
    e.height = c * f;
    this.frames = d;
    this.framewidth = b;
    this.frameheight = c;
    this.animsend = this.anims = f;
    this.animsstart = 0;
    this.ob.clip = "rect(0,0,0,0)";
    this.width = b;
    this.height = c;
    this.cAr = this.width - 1;
    this.cAb = this.height - 1;
    this.image = a
}
function Sp_setimageDOM2(a, b, c, d, f) {
    this.ob.backgroundImage = "url(" + a + ")";
    this.ob.width = b + "px";
    this.ob.height = c + "px";
    this.frames = d;
    this.framewidth = b;
    this.frameheight = c;
    this.animsend = this.anims = f;
    this.animsstart = 0;
    this.ob.clip = "rect(0px '+w+'px '+h+'px 0px)";
    this.ob.overflow = "hidden";
    this.width = b;
    this.height = c;
    this.cAr = this.width - 1;
    this.cAb = this.height - 1;
    this.image = a
}
function Sp_setimageNS(a, b, c, d, f) {
    this.ob.document.open();
    this.ob.document.write("<img src='" + a + "' width=" + b * d + " height=" + c * f + ">");
    this.ob.document.close();
    this.framewidth = b;
    this.frameheight = c;
    this.frames = d;
    this.animsend = this.anims = f;
    this.animsstart = 0;
    this.ob.clip.top = 0;
    this.ob.clip.bottom = 0;
    this.ob.clip.left = 0;
    this.ob.clip.right = 0;
    this.width = b;
    this.height = c;
    this.cAr = this.width - 1;
    this.cAb = this.height - 1;
    this.image = a
}
function Sp_swapimageIE(a) {
    this.image = this.raw.src = a
}
function Sp_swapimageDOM2(a) {
    this.image = this.raw.src = a
}
function Sp_swapimageNS(a) {
    this.image = this.ob.document.images[0].src = a
}
function Sp_resizeIE(a, b) {
    this.cAr -= this.width - 1;
    this.cAb -= this.height - 1;
    this.width = a;
    this.height = b;
    this.cAr += this.width - 1;
    this.cAb += this.height - 1;
    this.framewidth = a;
    this.frameheight = b;
    this.ob.width = this.width * this.frames;
    this.ob.height = this.height * this.anims;
    this.setAnimation(this.animpos)
}
function Sp_resizeDOM2(a, b) {
    this.cAr -= this.width - 1;
    this.cAb -= this.height - 1;
    this.width = a;
    this.height = b;
    this.cAr += this.width - 1;
    this.cAb += this.height - 1;
    this.framewidth = a;
    this.frameheight = b;
    this.ob.width = this.width * this.frames;
    this.ob.height = this.height * this.anims;
    this.setAnimation(this.animpos)
}
function Sp_resizeNS(a, b) {
    this.cAr -= this.width - 1;
    this.cAb -= this.height - 1;
    this.width = a;
    this.height = b;
    this.cAr += this.width - 1;
    this.cAb += this.height - 1;
    this.framewidth = a;
    this.frameheight = b;
    this.ob.document.open();
    this.ob.document.write("<img src='" + this.image + "' width=" + this.width * this.frames + " height=" + this.height * this.anims + ">");
    this.ob.document.close();
    this.setAnimation(this.animpos)
}
function Sp_switchonIE() {
    this.on || this.destroyed || (this.on = !0,
    this.off = !1,
    this.ob.posTop = this.y + Sp_yoffset - this.animpos * this.frameheight,
    this.ob.posLeft = this.x + Sp_xoffset - this.frame * this.framewidth,
    Sp_active[Sp_active.length] = this)
}
function Sp_switchonDOM2() {
    this.on || this.destroyed || (this.on = !0,
    this.off = !1,
    this.ob.top = this.y + Sp_yoffset + "px",
    this.ob.left = this.x + Sp_xoffset + "px",
    Sp_active[Sp_active.length] = this)
}
function Sp_switchonNS() {
    this.on || this.destroyed || (this.on = !0,
    this.off = !1,
    this.ob.moveTo(this.x + Sp_xoffset - this.frame * this.framewidth, this.y + Sp_yoffset - this.animpos * this.frameheight),
    Sp_active[Sp_active.length] = this)
}
function Sp_switchoff() {
    if (this.on) {
        var a;
        this.on = !1;
        this.off = !0;
        this.ob.left = "-10000px";
        this.hitarray = [];
        this.hit = null;
        Sp_active2 = [];
        for (a = 0; a < Sp_active.length; a++)
            Sp_active2[a] = Sp_active[a];
        Sp_active = [];
        for (a = 0; a < Sp_active2.length; a++)
            Sp_active2[a] != this && (Sp_active[Sp_active.length] = Sp_active2[a])
    }
}
function Sp_setspeed(a) {
    this.speed = a;
    this.xspeed = this.xdir * a;
    this.yspeed = this.ydir * a
}
function Sp_makestatic() {
    this.switchOff();
    this.isstatic = !0;
    this.hard = !1;
    this.speed = this.ydir = this.xdir = 0
}
function Sp_makehard() {
    this.isstatic = !1;
    this.hard = !0
}
function Sp_makenormal() {
    this.hard = this.isstatic = !1
}
function Sp_setanimrepeat(a) {
    -1 > a && (a = -1);
    this.animrepeat = a;
    this.crepeat = 0
}
function Sp_dragtype(a) {
    this.draghoriz = this.dragvert = this.dragnormal = !1;
    0 == a ? this.dragnormal = !0 : 1 == a ? this.dragvert = !0 : 2 == a && (this.draghoriz = !0)
}
function Sp_setOpacityIE(a) {
    100 > a ? (this.ob.filter = "alpha(opacity=" + a + ")",
    this.opacity = a) : (this.ob.filter = "",
    this.opacity = 100)
}
function Sp_setOpacityDOM2(a) {
    this.ob.MozOpacity = a + "%";
    this.opacity = a
}
function Sp_makeDraggable() {
    this.draggable = !0
}
function Sp_makeUndraggable() {
    this.draggable = !1
}
function Sp_groupHit() {
    Sp_groupHitCount[this.group]++;
    Sp_groupHitTriggerCount[this.group] && Sp_groupHitCount[this.group] == Sp_groupHitTriggerCount[this.group] && (eval(Sp_groupHitTriggerFunc[this.group]),
    Sp_groupHitCount[this.group] = 0)
}
function Sp_groupSet(a) {
    this.group = a;
    isNaN(Sp_groupHitCount[a]) && (Sp_groupHitCount[a] = 0)
}
function Sp_setValue(a) {
    this.value = a
}
function Sp_getHits() {
    return this.hitarray
}
function Sp_setCollisionZTest(a) {
    this.zDiffMax = a
}
function Sp_destroy() {
    this.switchOff();
    this.destroyed = !0
}
function Kb_trapkey(a) {
    return new Kb_keytrap(a.toUpperCase())
}
function Kb_keytrap(a) {
    var b;
    if (0 == Kb_keystrapped && (Gl_browser.ns4 ? (document.captureEvents(Event.KEYDOWN),
    document.onkeydown = kd2,
    document.captureEvents(Event.KEYUP),
    document.onkeyup = ku2,
    Gl_browser.unix && (Gl_formFrameX11 = new Gl_layer(0,0,200,'<form name="keytrapperform"><input type=text size=1 onblur="setTimeout(\'this.focus()\',50)" name="keyTrapper" onKeyDown="kd2(event)" onKeyUp="ku2(event)"></form>'),
    Gl_formFrameX11.setXlimits(-1E3, 1E3),
    Gl_formFrameX11.setYlimits(-1E3, 1E3),
    Gl_formFrameX11.moveTo(-15, -20),
    Gl_formFrameX11.raw.document.forms[0].elements[0].blur(),
    setTimeout("Gl_formFrameX11.raw.document.forms[0].elements[0].focus()", 50))) : Gl_browser.ie ? (document.body.onkeydown = kd,
    document.body.onkeyup = ku) : Gl_browser.dom2 && (document.onkeydown = kd2,
    document.onkeyup = ku2),
    Gl_browser.ns4 && -1 != navigator.userAgent.indexOf("X11") || new Gl_layer(0,0,200,"")),
    document.layers && 1 < a.length) {
        var c = "SHIFT A CTRL Z UP I DOWN K LEFT J RIGHT L".split(" ");
        for (b = 0; b < c.length; b += 2)
            if (a == c[b]) {
                a = c[b + 1];
                break
            }
    }
    if (1 < a.length) {
        switch (a) {
        case "SHIFT":
            c = 16;
            break;
        case "CTRL":
            c = 17;
            break;
        case "UP":
            c = 38;
            break;
        case "DOWN":
            c = 40;
            break;
        case "LEFT":
            c = 37;
            break;
        case "RIGHT":
            c = 39;
            break;
        case "ESC":
            c = 27;
            break;
        default:
            c = 0
        }
        this.code = c
    } else
        this.code = a.charCodeAt(0);
    return this.pressed = !1,
    this.event = null,
    this.setEvent = Kb_setEvent,
    this.clearEvent = Kb_clearEvent,
    Kb_keys[this.code] = this,
    1 == a.length && a.toUpperCase() != a.toLowerCase() && (this.code = a.toLowerCase().charCodeAt(0),
    Kb_keys[this.code] = this),
    Kb_keystrapped++,
    this
}
function kd() {
    Kb_lastcode = window.event.keyCode;
    kp(window.event.keyCode, !0)
}
function kd2(a) {
    a.preventDefault();
    Kb_lastcode = a.which;
    kp(a.which, !0)
}
function ku() {
    kp(window.event.keyCode, !1)
}
function ku2(a) {
    kp(a.which, !1)
}
function kp(a, b) {
    if (Kb_keys[a])
        return Kb_keys[a].pressed = b,
        Kb_lastkey = Kb_keys[a],
        b && this.event && eval(Kb_keys[a].event),
        !1
}
function Kb_setEvent(a) {
    this.event = a
}
function Kb_clearEvent() {
    this.event = null
}
function Kb_clearTrappedKeys() {
    for (var a in Kb_keys)
        Kb_keys[a] = null
}
var Sp_totalsprites = 0
  , Sp_xoffset = 0
  , Sp_yoffset = 0
  , Gl_version = 2.08
  , Gl_n = 0
  , Gl_STT = null
  , Gl_speedTestDiv = null
  , Gl_speedTestFinish = !1
  , Gl_callBack = ""
  , Gl_fps = 0
  , Gl_layers = []
  , Gl_totalpreimages = 0
  , Gl_interval = null
  , Gl_hooked = []
  , Gl_preimage = []
  , Gl_ticker = 0
  , Gl_sin = []
  , Gl_cos = []
  , Gl_cookies = []
  , Gl_layer_index = 0
  , Gl_iebuffer = null
  , Gl_ieframe = null
  , Gl_firstlayer = !0
  , Gl_f = []
  , Gl_flength = 0
  , Gl_timerSpeed = 50
  , Gl_browser = null
  , Gl_onSpecialItem = !1
  , Gl_loadQueue = []
  , Gl_loadwait = null
  , Gl_loadIndex = -4
  , Gl_loading = !1
  , Gl_loadTimer = null
  , Gl_loadCL = null
  , Gl_loadTime = 0
  , Gl_running = !1
  , Gl_widgetsInUse = !1;
Gl_browser = new Gl_getBrowser;
Gl_styleSheet();
Gl_makedegs();
Gl_get_cookies();
var Sp_blankurl = "blankpix.gif";
Sp_totalsprites = 0;
var Sp_sprite = []
  , Sp_active = []
  , Sp_active2 = []
  , Sp_groupHitCount = []
  , Sp_groupHitTriggerFunc = []
  , Sp_groupHitTriggerCount = []
  , Sp_spritesonscreen = 0
  , Sp_cxoffset = Sp_yoffset = Sp_xoffset = 0
  , Sp_cyoffset = 0
  , Sp_linuxcompatible = !0
  , Kb_keys = []
  , Kb_lastkey = -1
  , Kb_keystrapped = 0
  , Kb_lastcode = -1;
